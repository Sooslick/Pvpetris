<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>initGlobal()
osinfo = os_get_info()

ip = "127.0.0.1"
port = "27015"
enabled = false
connected = false
connectTimeout = 0
nickname = envGetNickname()
level = "0"
seed = ""
client_name = ""
clientConnected = false
vError = false

selected = 0

//0 = start
//1 = nickname
//2 = level
//3 = seed
//4 = host
//5 = port
//6 = connect
//7 = host
//8 = port
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if keyboard_check_pressed(vk_left) || keyboard_check_pressed(vk_right) {
  if selected &lt; 6
    selected = 7
  else
    selected = 1
  }
  
else if keyboard_check_pressed(vk_down) {
  selected++
  if selected &gt; 8
    selected = 0
  }
  
else if keyboard_check_pressed(vk_up) {
  selected--
  if selected &lt; 0
    selected = 0
  }
  
else if keyboard_check_pressed(vk_enter) || gamepad_button_check_pressed(0, gp_start) {
  if selected == 0 {
    if !connected {
      if !clientConnected
        enabled = false
      if seed == ""
        seed = string(irandom(2147483647))
      if enabled {
        buffer_seek(global.buffer, buffer_seek_start, 0);
        buffer_write(global.buffer, buffer_s8, 2)
        buffer_write(global.buffer, buffer_string, level)
        buffer_write(global.buffer, buffer_string, seed)
        buffer_write(global.buffer, buffer_string, nickname)
        network_send_packet( global.sock, global.buffer, buffer_tell(global.buffer) );
        }
      global.adapter = enabled || connected
      global.level = level
      global.seed = seed
      if global.adapter
        global.botnet = global.sock
      global.plleft = nickname
      global.plright = client_name
      room_goto(room0)
      }
    }
  else if selected == 4 {
    if !enabled &amp;&amp; !connected &amp;&amp; connectTimeout &lt;= 0 {
      enabled = true
      global.server = network_create_server(network_socket_tcp, real(port), 3);
      global.buffer = buffer_create(16, buffer_grow, 1);    
      }
    }
  else if selected == 6 {
    if !enabled &amp;&amp; !connected &amp;&amp; connectTimeout&lt;=0 {
      //connected = true
      connectTimeout = 153
      network_set_config(network_config_connect_timeout, 5000)
      network_set_config(network_config_use_non_blocking_socket, 1);
      global.client = network_create_socket(network_socket_tcp);
      network_connect(global.client, ip, real(port));
      global.buffer = buffer_create(16, buffer_grow, 1);
      }
    }
  keyboard_key_release(vk_enter)
  }
    
else if keyboard_check_pressed(vk_backspace) {
  if selected == 1
    nickname = string_copy(nickname, 1, string_length(nickname)-1)
  else if selected == 2
    level = string_copy(level, 1, string_length(level)-1)
  else if selected == 3
    seed = string_copy(seed, 1, string_length(seed)-1)
  else if selected == 5 || selected == 8
    port = string_copy(port, 1, string_length(port)-1)
  else if selected == 7
    ip = string_copy(ip, 1, string_length(ip)-1)
  }
  
else if keyboard_check(vk_control) &amp;&amp; keyboard_check_pressed(ord("V")) {
  if selected == 7
    if clipboard_has_text()
      ip = clipboard_get_text()
  }  
  
else if mouse_check_button_pressed(mb_left) {
  if point_in_rectangle(mouse_x, mouse_y, 0,0,640,100) {
    selected = 0
    keyboard_key_press(vk_enter)
    }
  else if point_in_rectangle(mouse_x, mouse_y, 0,120,640,180)
    selected = 1
  else if point_in_rectangle(mouse_x, mouse_y, 0,200,640,260)
    selected = 2
  else if point_in_rectangle(mouse_x, mouse_y, 0,280,640,340)
    selected = 3
  else if point_in_rectangle(mouse_x, mouse_y, 0,420,640,480) {
    selected = 4
    keyboard_key_press(vk_enter)
    }
  else if point_in_rectangle(mouse_x, mouse_y, 0,500,640,560)
    selected = 5
  else if point_in_rectangle(mouse_x, mouse_y, 640,0,1280,100) {
    selected = 6
    keyboard_key_press(vk_enter)
    }
  else if point_in_rectangle(mouse_x, mouse_y, 640,120,1280,180)
    selected = 7
  else if point_in_rectangle(mouse_x, mouse_y, 640,200,1280,260)
    selected = 8
  }  
  
else {
  if selected == 1 {
    if string_length(nickname) &lt; 32 {
      if (ord(keyboard_lastchar)&gt;32) &amp;&amp; (ord(keyboard_lastchar)&lt;128)
        nickname+= keyboard_lastchar
      else if (ord(keyboard_lastchar) &gt;= 128)
        nickname+= '?'
      }
    }
  if selected == 2 {
    if (ord(keyboard_lastchar)&gt;47) &amp;&amp; (ord(keyboard_lastchar)&lt;58) {
      level+= keyboard_lastchar
      if real(level) &gt; 30
        level = "30"
      }
    }
  if selected == 3 {
    if (ord(keyboard_lastchar)&gt;47) &amp;&amp; (ord(keyboard_lastchar)&lt;58)
      seed+= keyboard_lastchar
    }
  if selected == 5 || selected == 8 {
    if (ord(keyboard_lastchar)&gt;47) &amp;&amp; (ord(keyboard_lastchar)&lt;58)
      port+= keyboard_lastchar
    }
  if selected == 7 {
    if (ord(keyboard_lastchar)&gt;32) &amp;&amp; (ord(keyboard_lastchar)&lt;128)
      ip+= keyboard_lastchar
    else if (ord(keyboard_lastchar) &gt;= 128)
      nickname+= '?'
    }
  }
keyboard_lastchar = ''

connectTimeout--
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>eid = ds_map_find_value(async_load, "id");
type = ds_map_find_value(async_load, "type");
sock = ds_map_find_value(async_load, "socket");
qip = ds_map_find_value(async_load, "ip");
succeeded = ds_map_find_value(async_load, "succeeded")
msg_buff = ds_map_find_value(async_load, "buffer");

if type = network_type_data {
  var header = buffer_read(msg_buff, buffer_s8)
  switch header {
    case 0:
      client_name = buffer_read(msg_buff, buffer_string)
      var size = buffer_get_size(msg_buff)
      var vl = 0
      if size &gt;= string_length(client_name) + 6
        vl = buffer_read(msg_buff, buffer_u32)
      buffer_seek(global.buffer, buffer_seek_start, 0);
      if vl &gt;= 336 {                                      //todo - global.min aloowed
        buffer_write(global.buffer, buffer_s8, 1)
        buffer_write(global.buffer, buffer_string, nickname)
        }
      else {
        client_name = ""
        clientConnected = false
        buffer_write(global.buffer, buffer_s8, 3)
        }
      network_send_packet( eid, global.buffer, buffer_tell(global.buffer) );
      break
    case 1:
      client_name = buffer_read(msg_buff, buffer_string)
      break
    case 2:
      global.level = buffer_read(msg_buff, buffer_string)
      global.seed = buffer_read(msg_buff, buffer_string)
      global.adapter = true
      global.botnet = global.client
      global.plleft = nickname
      global.plright = buffer_read(msg_buff, buffer_string)
      buffer_seek(global.buffer, buffer_seek_start, 0);
      buffer_write(global.buffer, buffer_s8, 1)
      buffer_write(global.buffer, buffer_string, nickname)
      network_send_packet( eid, global.buffer, buffer_tell(global.buffer) );
      room_goto(room0)
      break
    case 3:
      connected = false
      vError = true
      break
    }
  }

else if type = network_type_connect {
  clientConnected = true
  global.sock = sock
  }
  
else if type = network_type_disconnect {
  clientConnected = false
  }  
  
else if type = network_type_non_blocking_connect {
  if succeeded {
    connected = true
    buffer_seek(global.buffer, buffer_seek_start, 0);
    buffer_write(global.buffer, buffer_s8, 0)
    buffer_write(global.buffer, buffer_string, nickname)
    buffer_write(global.buffer, buffer_u32, global.vlong)
    network_send_packet( global.client, global.buffer, buffer_tell(global.buffer) );
    }
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_alpha(0.1)
draw_sprite(sMenuBg,0,0,0)

draw_set_font(fTetris)
draw_set_alpha(1)
draw_set_color(c_white)
draw_set_halign(fa_left)
draw_set_valign(fa_bottom)
draw_text_transformed(0,720,global.version,0.4,0.4,0)

draw_set_halign(fa_right)
draw_text(1280,720,'Game controls:
Z/X - rotate
Arrow left/right - shift
Arrow down - drop
Esc - restart game')

draw_set_valign(fa_top)

draw_text(420, 50, "START PvPETRIS")
draw_text(310, 150, "Nickname:")
draw_text(310, 230, "Level:")
draw_text(310, 310, "Seed:")

draw_text(310,450, "Host:")
draw_text(310,530, "Port:")

draw_text(950, 50, "CONNECT")
draw_text(950, 150, "IP:")
draw_text(950, 230, "Port:")

draw_set_halign(fa_left)

draw_text(330, 150, nickname)
draw_text(330, 230, level)
draw_text(330, 310, seed)

if enabled
draw_text(330,450, "ENABLED")
else
draw_text(330,450, "enable")
draw_text(330,530, port)

draw_text(970, 150, ip)
draw_text(970, 230, port)

draw_set_blend_mode(bm_subtract)
draw_set_color(c_aqua)
switch selected {
  case 0:
    draw_rectangle(0,0,640,100,false)
    break
  case 1:
    draw_rectangle(0,120,640,200,false)
    break
  case 2:
    draw_rectangle(0,200,640,280,false)
    break
  case 3:
    draw_rectangle(0,280,640,360,false)
    break
  case 4:
    draw_rectangle(0,420,640,500,false)
    break
  case 5:
    draw_rectangle(0,500,640,580,false)
    break
  case 6:
    draw_rectangle(640,0,1280,100,false)
    break
  case 7:
    draw_rectangle(640,120,1280,200,false)
    break
  case 8:
    draw_rectangle(640,200,1280,280,false)
  }
draw_set_blend_mode(bm_normal)

if enabled 
  if clientConnected
    draw_text(850,450, "player2: " + client_name)
  else {
    draw_text(700,450, "wait for player2")
    draw_sprite_ext(sprite1,0,1024,468,0.5,0.5,connectTimeout*12,c_white,1)
    }
else if connected
  draw_text(850,450, "player1: " + client_name)
  
if connectTimeout &gt; 0 &amp;&amp; !connected {
  draw_text(789,450, "connecting")
  draw_sprite_ext(sprite1,0,1024,468,0.5,0.5,connectTimeout*12,c_white,1)
  }

if vError 
  draw_text(789,550, "Client outdated")
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
