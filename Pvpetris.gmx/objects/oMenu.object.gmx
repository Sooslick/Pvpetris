<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.adapter = false
global.server = -1
global.client = -1
randomize()

//general
nickname = envGetNickname()
level = "0"
seed = ""
sendMode = 2    // send modes: 0 nothing, 1 pbs, 2 all

//mpl
ip = "127.0.0.1"
port = "27015"
enabled = false
connected = false
connectTimeout = 0
client_name = ""
clientConnected = false
vError = false

//ui
selected = 0
hovered = 0
menuHost = false
menuCli = false
mousePos = mouse_x + mouse_y

//draw
sX1 = 0
sX2 = 640
sY1 = 0
sY2 = 100
hX1 = 0
hX2 = 640
hY1 = 0
hY2 = 100
drawName = nickname
drawLevel = level
drawSeed = seed
drawIp = ip
drawPort = port

//ui elements IDs
//0 = start
//1 = nickname
//2 = level
//3 = seed
//4 = enable host
//5 = on port
//6 = connect
//7 = host ip
//8 = with port
//9 = open host menu
//10 = open client menu
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//UI switching by keyboard
if keyboard_check_pressed(vk_left) {
  switch selected {
    case 0: case 1: 
      selected = 10; 
      break;
    case 2:
      if (menuCli) selected = 7
      else if (menuHost) selected = 4
      else selected = 10
      break
    case 3:
      if (menuCli) selected = 6
      else if (menuHost) selected = 5
      else selected = 10
      break
    case 4: case 7:
      selected = 2; 
      break;
    case 5: case 6: case 8:
      selected = 3; 
      break;
    case 9:
      selected = 1; 
      break;
    case 10:
      selected = 9
    }
  hovered = selected
  recalcBoundings(self)
  }
  
if keyboard_check_pressed(vk_right) {
  switch selected {
    case 0: case 1: 
      selected = 9; 
      break;
    case 2:
      if (menuCli) selected = 7
      else if (menuHost) selected = 4
      else selected = 9
      break
    case 3:
      if (menuCli) selected = 8
      else if (menuHost) selected = 5
      else selected = 9
      break
    case 4: case 7:
      selected = 2; 
      break;
    case 5: case 6: case 8:
      selected = 3; 
      break;
    case 9:
      selected = 10; 
      break;
    case 10:
      selected = 1
    }
  hovered = selected
  recalcBoundings(self)
  }  
  
else if keyboard_check_pressed(vk_down) {
  switch selected {
    case 0: case 1: case 2: case 4: case 7: selected++; break;
    case 3: selected = 0; break;
    case 5: selected = 9; break;
    case 6: selected = 10; break;
    case 8: selected = 6; break;
    case 9: if menuHost selected = 4; break;
    case 10: if menuCli selected = 7;
    }
  hovered = selected
  recalcBoundings(self)
  }
  
else if keyboard_check_pressed(vk_up) {
  switch selected {
    case 0: selected = 3; break;
    case 1: case 2: case 3: case 5: case 8: selected--; break;
    case 4: selected = 9; break;
    case 6: selected = 8; break;
    case 7: selected = 10; break;
    case 9: if menuHost selected = 5; break;
    case 10: if menuCli selected = 6;
    }
  hovered = selected
  recalcBoundings(self)
  }
  
//UI enter pressed (or mouse clicked)
else if keyboard_check_pressed(vk_enter) || gamepad_button_check_pressed(0, gp_start) {
  if selected == 0 {
    // don't start if connected to host player
    if !connected {
      if seed == ""
        seed = string(irandom(2147483647))
      if clientConnected {
        // send start signal to client
        global.adapter = true
        buffer_seek(global.buffer, buffer_seek_start, 0);
        buffer_write(global.buffer, buffer_s8, 2)
        buffer_write(global.buffer, buffer_string, level)
        buffer_write(global.buffer, buffer_string, seed)
        buffer_write(global.buffer, buffer_string, nickname)
        network_send_packet( global.sock, global.buffer, buffer_tell(global.buffer) );
        }
      else if enabled {
        // destroy server if nobody connected
        global.adapter = false
        network_destroy(global.server)
        global.server = -1
        show_debug_message("stopped server")
      }
      // start game
      global.level = level
      global.seed = seed
      if global.adapter
        global.botnet = global.sock
      //todo else destroy socket (UPD 04.2023: why?)
      global.plleft = nickname
      global.plright = client_name
      room_goto(room0)
      instance_destroy()
      }
    }
  else if selected == 4 {
    // create server
    if !enabled &amp;&amp; !connected &amp;&amp; connectTimeout &lt;= 0 {
      enabled = true
      global.server = network_create_server(network_socket_tcp, real(port), 3);
      global.buffer = buffer_create(16, buffer_grow, 1);    
      }
    }
  else if selected == 6 {
    // join game
    if !enabled &amp;&amp; !connected &amp;&amp; connectTimeout&lt;=0 {
      connectTimeout = 153      //five seconds + 3 extra ticks
      network_set_config(network_config_connect_timeout, 5000)
      network_set_config(network_config_use_non_blocking_socket, 1);
      global.client = network_create_socket(network_socket_tcp);
      network_connect(global.client, ip, real(port));
      global.buffer = buffer_create(16, buffer_grow, 1);
      }
    }
  else if selected == 9 {
    // open host menu
    connected = false
    connectTimeout = 0
    menuCli = false
    menuHost = true
    if (global.client != -1) network_destroy(global.client)
    global.client = -1
    }
  else if selected == 10 {
    // open client menu
    enabled = false
    clientConnected = false
    menuCli = true
    menuHost = false
    if (global.server != -1) network_destroy(global.server)
    global.server = -1
    }
  keyboard_key_release(vk_enter)
  }
    
//backspacing inputs
else if keyboard_check_pressed(vk_backspace) {
  if selected == 1
    nickname = string_copy(nickname, 1, string_length(nickname)-1)
  else if selected == 2
    level = string_copy(level, 1, string_length(level)-1)
  else if selected == 3
    seed = string_copy(seed, 1, string_length(seed)-1)
  else if selected == 5 || selected == 8
    port = string_copy(port, 1, string_length(port)-1)
  else if selected == 7
    ip = string_copy(ip, 1, string_length(ip)-1)
  recalcStrings(self)
  }
  
//paste ip
else if keyboard_check(vk_control) &amp;&amp; keyboard_check_pressed(ord("V")) {
  if clipboard_has_text()
    ip = clipboard_get_text()
  recalcStrings(self)
  }  
  
//mouse click: map clicked area, then procced as enter click
else if mouse_check_button_pressed(mb_left) {
  if point_in_rectangle(mouse_x, mouse_y, 0,0,640,100) {
    selected = 0
    keyboard_key_press(vk_enter)
    }
  else if point_in_rectangle(mouse_x, mouse_y, 0,120,640,200)
    selected = 1
  else if point_in_rectangle(mouse_x, mouse_y, 0,200,640,280)
    selected = 2
  else if point_in_rectangle(mouse_x, mouse_y, 0,280,640,360)
    selected = 3
  else if point_in_rectangle(mouse_x, mouse_y, 640,120,960,200) {
    selected = 9
    keyboard_key_press(vk_enter)
    }
  else if point_in_rectangle(mouse_x, mouse_y, 960,120,1280,200) {
    selected = 10
    keyboard_key_press(vk_enter)
    }
  else if point_in_rectangle(mouse_x, mouse_y, 640,200,1280,280) {
    if menuHost { selected = 4; keyboard_key_press(vk_enter); }
    else if menuCli selected = 7
    }
  else if point_in_rectangle(mouse_x, mouse_y, 640,280,1280,360) {
    if menuHost selected = 5
    else if menuCli selected = 8
    }
  else if point_in_rectangle(mouse_x, mouse_y, 640,360,1280,440)
    if menuCli { selected = 6; keyboard_key_press(vk_enter); }
  hovered = selected
  recalcBoundings(self)
  }  
  
//typing
else {
  if selected == 1 {
    if string_length(nickname) &lt; 32 {
      if (ord(keyboard_lastchar)&gt;32) &amp;&amp; (ord(keyboard_lastchar)&lt;128)
        nickname+= keyboard_lastchar
      else if (ord(keyboard_lastchar) &gt;= 128)
        nickname+= '?'
      }
    }
  if selected == 2 {
    if (ord(keyboard_lastchar)&gt;47) &amp;&amp; (ord(keyboard_lastchar)&lt;58) {
      level+= keyboard_lastchar
      if real(level) &gt; 19
        level = "19"
      }
    }
  if selected == 3 {
    if (ord(keyboard_lastchar)&gt;47) &amp;&amp; (ord(keyboard_lastchar)&lt;58)
      if string_length(seed) &lt; 10
        seed+= keyboard_lastchar
    }
  if selected == 5 || selected == 8 {
    if (ord(keyboard_lastchar)&gt;47) &amp;&amp; (ord(keyboard_lastchar)&lt;58)
      if string_length(port) &lt; 5
        if (!enabled)
          port+= keyboard_lastchar
    }
  if selected == 7 {
    if (ord(keyboard_lastchar)&gt;32) &amp;&amp; (ord(keyboard_lastchar)&lt;128)
      ip+= keyboard_lastchar
    else if (ord(keyboard_lastchar) &gt;= 128)
      ip+= '?'
    }
  recalcStrings(self)
  }
keyboard_lastchar = ''

//timer
connectTimeout--
if (connectTimeout == 0 &amp;&amp; !connected) {
  network_destroy(global.client)
  global.client = -1
  show_debug_message("destroyed client")
}

//mouse cursor
if (mouse_x + mouse_y != mousePos) {
  mousePos = mouse_x + mouse_y
  if point_in_rectangle(mouse_x, mouse_y, 0,0,640,100) 
    hovered = 0
  else if point_in_rectangle(mouse_x, mouse_y, 0,120,640,200)
    hovered = 1
  else if point_in_rectangle(mouse_x, mouse_y, 0,200,640,280)
    hovered = 2
  else if point_in_rectangle(mouse_x, mouse_y, 0,280,640,360)
    hovered = 3
  else if point_in_rectangle(mouse_x, mouse_y, 640,120,960,200)
    hovered = 9
  else if point_in_rectangle(mouse_x, mouse_y, 960,120,1280,200) 
    hovered = 10
  else if point_in_rectangle(mouse_x, mouse_y, 640,200,1280,280) {
    if menuHost hovered = 4
    else if menuCli hovered = 7
    }
  else if point_in_rectangle(mouse_x, mouse_y, 640,280,1280,360) {
    if menuHost hovered = 5
    else if menuCli hovered = 8
    }
  else if point_in_rectangle(mouse_x, mouse_y, 640,360,1280,440)
    if menuCli hovered = 6
  recalcBoundings(self)
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>eid = ds_map_find_value(async_load, "id");
type = ds_map_find_value(async_load, "type");
sock = ds_map_find_value(async_load, "socket");
qip = ds_map_find_value(async_load, "ip");
succeeded = ds_map_find_value(async_load, "succeeded")
msg_buff = ds_map_find_value(async_load, "buffer");

if type = network_type_data {
  var header = buffer_read(msg_buff, buffer_s8)
  switch header {
    case 0:     //init data packet from client
      client_name = buffer_read(msg_buff, buffer_string)
      var size = buffer_get_size(msg_buff)
      var vl = 0
      if size &gt;= string_length(client_name) + 6
        vl = buffer_read(msg_buff, buffer_u32)
      buffer_seek(global.buffer, buffer_seek_start, 0);
      // checking version descriptor
      if vl != vlong {
        buffer_write(global.buffer, buffer_s8, 1)
        buffer_write(global.buffer, buffer_string, nickname)
        }
      else {
        // decline incompatible
        client_name = ""
        clientConnected = false
        buffer_write(global.buffer, buffer_s8, 3)
        }
      network_send_packet( eid, global.buffer, buffer_tell(global.buffer) );
      break
    case 1:    //init packet from server
      client_name = buffer_read(msg_buff, buffer_string)
      break
    case 2:    //proceed to the game
      global.level = buffer_read(msg_buff, buffer_string)
      global.seed = buffer_read(msg_buff, buffer_string)
      global.adapter = true
      global.botnet = global.client
      global.plleft = nickname
      global.plright = buffer_read(msg_buff, buffer_string)
      buffer_seek(global.buffer, buffer_seek_start, 0);
      buffer_write(global.buffer, buffer_s8, 1)
      buffer_write(global.buffer, buffer_string, nickname)
      network_send_packet( eid, global.buffer, buffer_tell(global.buffer) );
      room_goto(room0)
      instance_destroy()
      break
    case 3:    //error packet from server
      connected = false
      vError = true
      break
    }
  }

else if type = network_type_connect {
  clientConnected = true
  global.sock = sock
  }
  
else if type = network_type_disconnect {
  clientConnected = false
  }  
  
else if type = network_type_non_blocking_connect {
  if succeeded {
    //send init data packet after connection to server
    connected = true
    buffer_seek(global.buffer, buffer_seek_start, 0);
    buffer_write(global.buffer, buffer_s8, 0)
    buffer_write(global.buffer, buffer_string, nickname)
    buffer_write(global.buffer, buffer_u32, vlong)        // send game version descriptor
    network_send_packet( global.client, global.buffer, buffer_tell(global.buffer) );
    }
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//background
draw_set_alpha(0.1)
draw_sprite(sMenuBg,0,0,0)

//version info
draw_set_font(fTetris)
draw_set_alpha(1)
draw_set_color(c_white)
draw_set_halign(fa_left)
draw_set_valign(fa_bottom)
draw_text_transformed(0,720,global.version,0.4,0.4,0)

//hlep
draw_text_transformed(0,675,'Game controls:
Z/X - rotate
Left/right - shift
Down - drop
Space - restart game
Esc - quit to menu
__________________', 0.4, 0.4, 0)

//general elements
draw_set_valign(fa_center)
draw_set_halign(fa_right)
draw_text(420, 50, "START PvPETRIS")
draw_text(310, 160, "Nickname:")
draw_text(310, 240, "Level:")
draw_text(310, 320, "Seed:")

draw_set_halign(fa_left)
draw_text(330, 160, drawName)
draw_text(330, 240, drawLevel)
draw_text(330, 320, drawSeed)

//mpl menu
draw_set_halign(fa_center)
draw_text(960, 50, "PLAY w/ FRIEND")
    draw_text(900, 160, "HOST")
    draw_text(1020,160, "JOIN")  

//mpl host menu
if (menuHost) {
  draw_set_halign(fa_right)
  draw_text(950, 240, "Server:")
  draw_text(950, 320, "Port:")
  if (enabled)
    draw_text(800, 400, "Status:")
  draw_set_halign(fa_left)
  if (enabled)
    draw_text(970, 240, "ENABLED")
  else
    draw_text(970, 240, "ENABLE")
  draw_text(970,320, drawPort)
  if (enabled) {
    if (clientConnected)
      draw_text(820, 400, client_name + " connected")
    else
      draw_text(820, 400, "waiting for player2")
    }
  }

//mpl client menu
if (menuCli) {
  draw_set_halign(fa_right)
  draw_text(950, 240, "IP:")
  draw_text(950, 320, "Port:")
  if (connectTimeout &gt; 0 || connected)
    draw_text(800, 400, "Status:")
  else
    draw_text(950, 400, "CONNECT")
  draw_set_halign(fa_left)
  draw_text(970, 240, drawIp)
  draw_text(970, 320, drawPort)
  if (connectTimeout &gt; 0 || connected) {
    if (connected)
      draw_text(820, 400, "connected to " + client_name)
    else
      draw_text(820, 400, "connecting")
    }
  }

//selected menu item
draw_set_blend_mode(bm_subtract)
draw_set_color(c_aqua)
draw_rectangle(sX1,sY1,sX2,sY2,false)
draw_set_blend_mode(bm_normal)
draw_rectangle(hX1,hY1,hX2,hY2,true)

if connectTimeout &gt; 0 &amp;&amp; !connected {
  draw_sprite_ext(sprite1,0,1060,400,0.5,0.5,connectTimeout*16,c_white,1)
  }

if vError 
  draw_text(789,550, "Client outdated")
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
